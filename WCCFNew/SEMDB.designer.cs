#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCCFNew
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SMBDB")]
	public partial class SEMDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmail(Email instance);
    partial void UpdateEmail(Email instance);
    partial void DeleteEmail(Email instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertFace(Face instance);
    partial void UpdateFace(Face instance);
    partial void DeleteFace(Face instance);
    partial void InsertSMtype(SMtype instance);
    partial void UpdateSMtype(SMtype instance);
    partial void DeleteSMtype(SMtype instance);
    partial void InsertSocialMedia(SocialMedia instance);
    partial void UpdateSocialMedia(SocialMedia instance);
    partial void DeleteSocialMedia(SocialMedia instance);
    partial void InsertTwitter(Twitter instance);
    partial void UpdateTwitter(Twitter instance);
    partial void DeleteTwitter(Twitter instance);
    partial void InsertUMail(UMail instance);
    partial void UpdateUMail(UMail instance);
    partial void DeleteUMail(UMail instance);
    #endregion
		
		public SEMDBDataContext() : 
				base(global::WCCFNew.Properties.Settings.Default.SMBDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SEMDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SEMDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SEMDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SEMDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Email> Emails
		{
			get
			{
				return this.GetTable<Email>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Face> Faces
		{
			get
			{
				return this.GetTable<Face>();
			}
		}
		
		public System.Data.Linq.Table<SMtype> SMtypes
		{
			get
			{
				return this.GetTable<SMtype>();
			}
		}
		
		public System.Data.Linq.Table<SocialMedia> SocialMedias
		{
			get
			{
				return this.GetTable<SocialMedia>();
			}
		}
		
		public System.Data.Linq.Table<Twitter> Twitters
		{
			get
			{
				return this.GetTable<Twitter>();
			}
		}
		
		public System.Data.Linq.Table<UMail> UMails
		{
			get
			{
				return this.GetTable<UMail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Email")]
	public partial class Email : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_UserID;
		
		private string _EmailAddress;
		
		private int _EmailID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_UserIDChanging(int value);
    partial void OnUser_UserIDChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnEmailIDChanging(int value);
    partial void OnEmailIDChanged();
    #endregion
		
		public Email()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_UserID", DbType="Int NOT NULL")]
		public int User_UserID
		{
			get
			{
				return this._User_UserID;
			}
			set
			{
				if ((this._User_UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_UserIDChanging(value);
					this.SendPropertyChanging();
					this._User_UserID = value;
					this.SendPropertyChanged("User_UserID");
					this.OnUser_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Email", Storage="_User", ThisKey="User_UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Emails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Emails.Add(this);
						this._User_UserID = value.UserID;
					}
					else
					{
						this._User_UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _isSubbed;
		
		private EntitySet<Email> _Emails;
		
		private EntitySet<SocialMedia> _SocialMedias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnisSubbedChanging(bool value);
    partial void OnisSubbedChanged();
    #endregion
		
		public User()
		{
			this._Emails = new EntitySet<Email>(new Action<Email>(this.attach_Emails), new Action<Email>(this.detach_Emails));
			this._SocialMedias = new EntitySet<SocialMedia>(new Action<SocialMedia>(this.attach_SocialMedias), new Action<SocialMedia>(this.detach_SocialMedias));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSubbed", DbType="Bit NOT NULL")]
		public bool isSubbed
		{
			get
			{
				return this._isSubbed;
			}
			set
			{
				if ((this._isSubbed != value))
				{
					this.OnisSubbedChanging(value);
					this.SendPropertyChanging();
					this._isSubbed = value;
					this.SendPropertyChanged("isSubbed");
					this.OnisSubbedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Email", Storage="_Emails", ThisKey="UserID", OtherKey="User_UserID")]
		public EntitySet<Email> Emails
		{
			get
			{
				return this._Emails;
			}
			set
			{
				this._Emails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SocialMedia", Storage="_SocialMedias", ThisKey="UserID", OtherKey="User_UserID")]
		public EntitySet<SocialMedia> SocialMedias
		{
			get
			{
				return this._SocialMedias;
			}
			set
			{
				this._SocialMedias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Emails(Email entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Emails(Email entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SocialMedias(SocialMedia entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SocialMedias(SocialMedia entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Face")]
	public partial class Face : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AToken;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnATokenChanging(string value);
    partial void OnATokenChanged();
    #endregion
		
		public Face()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AToken", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string AToken
		{
			get
			{
				return this._AToken;
			}
			set
			{
				if ((this._AToken != value))
				{
					this.OnATokenChanging(value);
					this.SendPropertyChanging();
					this._AToken = value;
					this.SendPropertyChanged("AToken");
					this.OnATokenChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SMtype")]
	public partial class SMtype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SocialMedia_SMtyKey;
		
		private string _Type;
		
		private EntitySet<SocialMedia> _SocialMedias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSocialMedia_SMtyKeyChanging(int value);
    partial void OnSocialMedia_SMtyKeyChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public SMtype()
		{
			this._SocialMedias = new EntitySet<SocialMedia>(new Action<SocialMedia>(this.attach_SocialMedias), new Action<SocialMedia>(this.detach_SocialMedias));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialMedia_SMtyKey", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SocialMedia_SMtyKey
		{
			get
			{
				return this._SocialMedia_SMtyKey;
			}
			set
			{
				if ((this._SocialMedia_SMtyKey != value))
				{
					this.OnSocialMedia_SMtyKeyChanging(value);
					this.SendPropertyChanging();
					this._SocialMedia_SMtyKey = value;
					this.SendPropertyChanged("SocialMedia_SMtyKey");
					this.OnSocialMedia_SMtyKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SMtype_SocialMedia", Storage="_SocialMedias", ThisKey="SocialMedia_SMtyKey", OtherKey="SMtyKey")]
		public EntitySet<SocialMedia> SocialMedias
		{
			get
			{
				return this._SocialMedias;
			}
			set
			{
				this._SocialMedias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SocialMedias(SocialMedia entity)
		{
			this.SendPropertyChanging();
			entity.SMtype = this;
		}
		
		private void detach_SocialMedias(SocialMedia entity)
		{
			this.SendPropertyChanging();
			entity.SMtype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SocialMedia")]
	public partial class SocialMedia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_UserID;
		
		private string _SMHandle;
		
		private int _SMtyKey;
		
		private EntityRef<SMtype> _SMtype;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_UserIDChanging(int value);
    partial void OnUser_UserIDChanged();
    partial void OnSMHandleChanging(string value);
    partial void OnSMHandleChanged();
    partial void OnSMtyKeyChanging(int value);
    partial void OnSMtyKeyChanged();
    #endregion
		
		public SocialMedia()
		{
			this._SMtype = default(EntityRef<SMtype>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_UserID", DbType="Int NOT NULL")]
		public int User_UserID
		{
			get
			{
				return this._User_UserID;
			}
			set
			{
				if ((this._User_UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_UserIDChanging(value);
					this.SendPropertyChanging();
					this._User_UserID = value;
					this.SendPropertyChanged("User_UserID");
					this.OnUser_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMHandle", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SMHandle
		{
			get
			{
				return this._SMHandle;
			}
			set
			{
				if ((this._SMHandle != value))
				{
					this.OnSMHandleChanging(value);
					this.SendPropertyChanging();
					this._SMHandle = value;
					this.SendPropertyChanged("SMHandle");
					this.OnSMHandleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMtyKey", DbType="Int NOT NULL")]
		public int SMtyKey
		{
			get
			{
				return this._SMtyKey;
			}
			set
			{
				if ((this._SMtyKey != value))
				{
					if (this._SMtype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSMtyKeyChanging(value);
					this.SendPropertyChanging();
					this._SMtyKey = value;
					this.SendPropertyChanged("SMtyKey");
					this.OnSMtyKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SMtype_SocialMedia", Storage="_SMtype", ThisKey="SMtyKey", OtherKey="SocialMedia_SMtyKey", IsForeignKey=true)]
		public SMtype SMtype
		{
			get
			{
				return this._SMtype.Entity;
			}
			set
			{
				SMtype previousValue = this._SMtype.Entity;
				if (((previousValue != value) 
							|| (this._SMtype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SMtype.Entity = null;
						previousValue.SocialMedias.Remove(this);
					}
					this._SMtype.Entity = value;
					if ((value != null))
					{
						value.SocialMedias.Add(this);
						this._SMtyKey = value.SocialMedia_SMtyKey;
					}
					else
					{
						this._SMtyKey = default(int);
					}
					this.SendPropertyChanged("SMtype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SocialMedia", Storage="_User", ThisKey="User_UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SocialMedias.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SocialMedias.Add(this);
						this._User_UserID = value.UserID;
					}
					else
					{
						this._User_UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Twitter")]
	public partial class Twitter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AToken;
		
		private string _ASecret;
		
		private long _UserId;
		
		private string _ScreenName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnATokenChanging(string value);
    partial void OnATokenChanged();
    partial void OnASecretChanging(string value);
    partial void OnASecretChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnScreenNameChanging(string value);
    partial void OnScreenNameChanged();
    #endregion
		
		public Twitter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AToken", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string AToken
		{
			get
			{
				return this._AToken;
			}
			set
			{
				if ((this._AToken != value))
				{
					this.OnATokenChanging(value);
					this.SendPropertyChanging();
					this._AToken = value;
					this.SendPropertyChanged("AToken");
					this.OnATokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ASecret", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string ASecret
		{
			get
			{
				return this._ASecret;
			}
			set
			{
				if ((this._ASecret != value))
				{
					this.OnASecretChanging(value);
					this.SendPropertyChanging();
					this._ASecret = value;
					this.SendPropertyChanged("ASecret");
					this.OnASecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenName", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string ScreenName
		{
			get
			{
				return this._ScreenName;
			}
			set
			{
				if ((this._ScreenName != value))
				{
					this.OnScreenNameChanging(value);
					this.SendPropertyChanging();
					this._ScreenName = value;
					this.SendPropertyChanged("ScreenName");
					this.OnScreenNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UMail")]
	public partial class UMail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public UMail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
